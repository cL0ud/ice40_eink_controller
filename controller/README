ice40 eink verilog controller

Notes

Yosys 0.6 needed, because it seems there is a bug related to BRAM with current version https://github.com/cliffordwolf/yosys/issues/335

About performances

Ifusb 12Mhz SPI
1s : 0.25s WRITE + 0.75s DRAW(at 40ns)
0.75s : 0.25s WRITE + 0.50s DRAW(at 20ns)

Full framebuffer write: 800x600/4 = 120000 bytes
At 12Mhz, SPI bandwidth should be around 9Mbs, so theoricaly we should have a write time of ~0.1s but ifusb will introduce latency to SPI because of USB (120000/64 = 1875 bulk packets)

SPI protocol

Command 		Hex		Description
EINK_PING 		0x01	Ping the chip
EINK_STATUS 	0x02	Get current screen status
EINK_WRITE 		0x03	Write data to framebuffer
EINK_DRAW 		0x04	Draw framebuffer to screen
EINK_SET_MODE 	0x05	Set current draw mode

EINK_PING
For testing purpose, simply ping the chip, should return the data send
0x01 0xAA -> 0xAA

EINK_STATUS
Get screen status
0x02 STATUS

Where STATUS is:
bits 7-3: reserved
bits 2-1: current drawing mode (see EINK_SET_MODE)
bit 0: ready or not

EINK_WRITE
Write pixels data to chip framebuffer
0x03 followed by 800x600/4 = 120000 bytes representing pixels in

EINK_DRAW
Actually draw current framebuffer on panel
0x04 0x00

EINK_SET_MODE
Set drawing mode
MODE_CLEAR 	0x00 Clear the screen to white
MODE_DRAW 	0x01 GC4 mode

Waveform hex format

x = color
y = phase

Eink ED06SC7 display signals:
	gmode/mode1: output mode
	cl: source clock
	ckv: gate clock
	spv (start pulse gate): high->low start gate sequence
	sph/xstl (start pulse source): high->low start source sequence
	le (latch enable): low->high load data
	oe (output enable): high->low output data
	d[7:0]: data

source:
     ┌─┐  ┌─┐  ┌─┐  ┌─┐  ┌─┐
cl  ─┘ └──┘ └──┘ └──┘ └──┘ └─ 50ns cycle
    ───┐    ┌────────────────
sph    └────┘
                    ┌─┐           
le  ────────────────┘ └──────
                                                 
d[7:0] __DD___DD___DD___

gate:
     ┌─┐  ┌─┐  ┌─┐  ┌─┐  ┌─┐
ckv ─┘ └──┘ └──┘ └──┘ └──┘ └─ min L 0.5 us
    ──┐    ┌─────────────────
spv   └────┘

References:
http://essentialscrap.com/eink/waveforms.html
http://www.eevblog.com/forum/microcontrollers/interfacing-epd-%28e-ink%29-display-from-kindle-anyone-tried/

TODO
- 20ns operation works, but seems to be a bit buggy
- add SPI command for setting waveform
- 2-bits/4 colors only, must support 4-bits/16 colors (see next point)
- refactor sram/waveform : 

Instead of keeping flipping 2-bits pixel in framebuffer (old pix and new pix) and calculating panel 2-bits signal at drawing step, keep only old framebuffer in 4-bits form in highest part of sram (start at 128k) and calculate 2-bits signal at write step and keep it in lowest part of sram. With this method, we can achieve best performance (20ns operations at drawing), SPI bandwidth being limited by itself (8 cycles for sck 12Mhz) we have more timing room at this step. 

Read the old value from sram, calculate the signal, and write the result to sram should take 4 cycles:
- receive new pixel + set address of old pixel
- read old pixel + set it to waveform calculator
- read calculated result + set address and data to write calculation
- wait data to be writen
